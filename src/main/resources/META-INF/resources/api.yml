openapi: 3.0.1
info:
  title: contact-service API
  version: 1.0.0
  description: |
    Contact Service
servers:
  - url: http://localhost:8074
    description: Generated server url
tags: []
paths:
  /contacts:
    get:
      tags:
        - Contact
      summary: Get the list of contact by user identity
      operationId: getContactList
      parameters:
        - name : userId
          in : query
          description: user id
          required: false
          schema:
            type: string
          example: 123
        - name : searchText
          in : query
          description: search text
          required: false
          schema:
            type: string
          example: abc
        - name: listOrders
          in: query
          description: Results will be sorted and ordered based on the given criteria
          required: false
          schema:
            type: string
          example: firstName-DESC
        - name: pageSize
          in: query
          description: Number of User Accounts returned per page/request
          required: false
          schema:
            type: integer
            default: 10
        - name: pageNumber
          in: query
          description: Get User Accounts in a specific page number
          required: false
          schema:
            type: integer
            default: 1
      responses:
        503:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        200:
          description: Retrieve data succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryResponse'
        404:
          description: Data Not Found
          content:
            application/json:
              schema:
                type: string
        400:
          description: Input data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
      security:
        - Bearer: [ ]
    post:
      tags:
        - Contact
      summary: Create a new contact for given user identity
      operationId: createContact
      requestBody:
        description: Contact data model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeneficiaryRecord'
      responses:
          503:
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          201:
            description: Contact data model created succesfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeneficiaryCreateResponse'
          404:
            description: Data Not Found
            content:
              application/json:
                schema:
                  type: string
          400:
            description: Input data is invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: string
      security:
        - Bearer: [ ]
  /contacts/{id}:
    delete:
      tags:
        - Contact
      summary: Delete the contact using contact id
      operationId: deleteContactById
      parameters:
        - name: id
          in: path
          description: contact id
          required: true
          schema:
            type: string
          example: 123
      responses:
        503:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        204:
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryResponse'
        404:
          description: Data Not Found
          content:
            application/json:
              schema:
                type: string
        400:
          description: Input data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - Bearer: [ ]
  /beneficiaries:
    get:
      tags:
        - Beneficiary
      summary: Lookup beneficiary account
      description: Lookup beneficiary account by mobile number and account number
      operationId:  lookupBeneficiary
      parameters:
        - name: mobileNumber
          in: query
          description: Mobile Number
          required: false
          schema:
            type: string
          example: 65086508427
        - name: accountNumber
          in: query
          description: Account Number
          required: false
          schema:
            type: string
          example: 120086508427
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        503:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Data Not Found
          content:
            application/json:
              schema:
                type: string
        400:
          description: Input data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
      security:
        - Bearer: [ ]
#-----
components:
  schemas:
    BeneficiaryCreateResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BeneficiaryData'
    BeneficiaryResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BeneficiaryData'
        paging:
          $ref: '#/components/schemas/PagingInformation'
    ServiceDataResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
        paging:
          $ref: '#/components/schemas/PagingInformation'
        status:
          $ref: '#/components/schemas/ResponseStatus'
    PagingInformation:
      type: object
      properties:
        totalRecords:
          type: integer
        pageSize:
          type: integer
        pageNumber:
          type: integer
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseStatus'
    ResponseStatus:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    BeneficiaryAccountResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BeneficiaryAccount'
    WalletResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BeneficiaryData'
        paging:
          $ref: '#/components/schemas/PagingInformation'
        status:
          $ref: '#/components/schemas/ResponseStatus'
    BeneficiaryAccount:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
          readOnly: true
        accountNumber:
          type: string
          readOnly: true
        displayName:
          type: string
    BeneficiaryData:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
        paymentReference:
          type: string
        accountNumber:
          type: string
    BeneficiaryRecord:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        serviceCode:
          type: string
          default: ""
        subServiceCode:
          type: string
          default: ""
        displayName:
          type: string
          default: ""
        paymentReference:
          type: string
          default: ""
        mobileNumber:
          type: string
          default: ""
        accountNumber:
          type: string
          default: ""
        branchCode:
          type: string
          default: ""
        bankCode:
          type: string
          default: ""
        city:
          type: string
          default: ""
        state:
          type: string
          default: ""
        postCode:
          type: string
          default: ""
        address:
          type: string
          default: ""
        verificationStatus:
          type: string
          default: ""
        verificationAt:
          type: string
          default: ""
    BankAccount:
      type: object
      properties:
        bankCode:
          type: string
        accountNumber:
          type: string
        accountHolderName:
          type: string
        accountId:
          type: string
    Wallet:
      type: object
      properties:
        walletId:
          type: string
          example: 11889-99982-10056-51950
          description: Wallet ID of the specific wallet
        userId:
          type: string
          example: '2222056798197'
          description: Id of the owner of the wallet(member Id)
        walletName:
          type: string
          example: my wallet 003
          description: Name of the wallet
        currentBalance:
          type: number
          example: 200.23
          description: Current balance of the wallet. Meaningful only when wallet is a type of virtual wallet
        availableBalance:
          type: number
          example: 100.23
          description: Available balance of the wallet. Meaningful only when wallet is a type of virtual wallet
        minimumBalance:
          type: number
          example: 10.23
          description: Minimum balance that this wallet should hold. Meaningful only when wallet is a type of virtual wallet
        bankAccount:
          example: '10.23'
          description: Minimum balance that this wallet should hold. Meaningful only when wallet is a type of virtual wallet
          $ref: '#/components/schemas/BankAccount'
        currencyCode:
          type: string
          example: GBP
          description: Currency code(in ISO 4217 alphabetic code standards) of the wallet. Meaningful only when wallet is a type of virtual wallet
        status:
          type: string
          example: ACTIVE
          description: Status of the wallet
          enum:
            - ACTIVE
            - INACTIVE
            - BLOCKED
            - EXPIRED
            - TXN_SYNCING
        type:
          type: string
          example: BANK_WALLET
          description: Type of the wallet
          enum:
            - BANK_WALLET
            - VIRTUAL_WALLET
        isDefaultWallet:
          type: boolean
          example: true
          description: Flag for indicating the default wallet among all the other wallets of a specific member
        balanceAsAtDateTime:
          type: string
          format: date-time
          example: '2019-12-16T03:37:17Z'
          description: Indicate the last checked time of the balance
        expiredAt:
          type: string
          format: date-time
          example: '2019-12-16T03:37:17Z'
          description: Wallet expiring date(in ISO 8061 format)in UTC
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer